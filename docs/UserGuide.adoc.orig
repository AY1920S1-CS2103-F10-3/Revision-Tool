= CS2103/T Revision Tool - User Guide
:site-section: UserGuide
:toc:
:toc-title:
:toc-placement: preamble
:sectnums:
:imagesDir: images
:stylesDir: stylesheets
:xrefstyle: full
:experimental:
ifdef::env-github[]
:tip-caption: :bulb:
:note-caption: :information_source:
endif::[]
:repoURL: https://github.com/AY1920S1-CS2103-F10-3/main

By: `Team F10-3`      Since: `Jun 2016`      Licence: `MIT`

== Introduction

This CS2103/T Revision Tool (RT) is for those who *prefer to use a desktop app for storing test banks*.
More importantly, RT is *optimized for those who prefer to work with a Command Line
Interface* (CLI) while still having the benefits of a Graphical User Interface (GUI).
If you can type fast, RT can get your contact management tasks done faster than traditional
GUI apps. Interested? Jump to the <<Quick Start>> to get started. Enjoy!

== Quick Start

.  Ensure you have Java `11` or above installed in your Computer.
.  Download the latest RT link:{repoURL}/releases[here].
.  Copy the file to the folder you want to use as the home folder for your `*test bank*`.
.  Double-click the file to start the app. The GUI should appear in a few seconds.
+
image::Ui.png[width="790"]
+
.  Type the command in the command box and press kbd:[Enter] to execute it. +
e.g. typing *`help`* and pressing kbd:[Enter] will open the help window.
.  Some example commands you can try:

* *`list`* : lists all categories and difficulties for the user to choose.
<<<<<<< HEAD
* **`add `**`type/mcq q/According to the textbook, which kind of project is more difficult? x/Greenfield x/Brownfield y/None
of the above x/Padifield diff/1 cat/Introduction` : adds an mcq question with x/ (as in a cross for "wrong") marking the wrong answers and
y/ (as in "yes") marking the correct answers. Difficulty: 1, Category: Introduction.
=======
* **`add`**`type/mcq q/According to the textbook, which kind of project is more difficult? x/Greenfield x/Brownfield y/None
of the above x/Padifield` : adds an mcq question with x/ (as in a cross for "wrong") marking the wrong answers and y/ (as in "yes") marking the correct answers.
>>>>>>> 985a9e837017a5122b140ddb22aad1f3b76ddd41
* **`delete`**`3` : deletes the 3rd question shown in the current list.
* *`exit`* : exits the app.

.  Refer to <<Features>> for details of each command.

[[Features]]
== Features

====
*Command Format*

<<<<<<< HEAD
* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `add ~ q/QUESTION ~`, `QUESTION` is a parameter
which can be used as `add ~ q/What the recommended user story format? ~`. "~" refers to other parameters that have to be included such as type, difficulty etc.
=======
* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `add type/TYPE q/QUESTION`, 'TYPE' and `QUESTION` are parameters
which can be used as `add type/mcq q/What the recommended user story format?`.
>>>>>>> 985a9e837017a5122b140ddb22aad1f3b76ddd41
* Items with `…`​ after them can be used multiple times including zero times e.g. `[x/WRONG_ANSWER]...` can be used as `{nbsp}` (i.e. 0 times), `x/Greenfield`, `x/Brownfield` etc.
* Parameters can be in any order e.g. if the command specifies `q/QUESTION cat/CATEGORY`, `cat/CATEGORY q/QUESTION` is also acceptable.
====

=== Viewing help : `help`

Format: `help`

Opens the Help Window to direct you to our help page.

=== Starting the quiz: `start`.

User can start by choosing the mode of the quiz. (normal / arcade / custom)

Format: `start mode/MODE`

[TIP]
To start all questions in the test bank, use command +
start mode/normal

Examples:

* `start mode/normal`
* `start mode/custom`

=== Exiting the quiz / application: `exit`

User can end the quiz and go back into configuration mode to perform commands such as `add`, `list`, and `status`
.

If user is in configuration mode, `exit` will close the application.

Format: `exit`

=== Check your progress: `status`

Displays the number of questions answered correctly by category and difficulty.

Format: `status`

Example:

`status`

*Total*: 290/300 questions answered correctly

Difficulty::
* Level 1: 100/100
* Level 2: 100/100
* Level 3: 90/100

Category::
* Requirements: 100/100
* Design: 50/100
* Implementation: 50/100
* Project Management: 90/100

=== AutoComplete Function

Helps you complete your command when you type.

Upon pressing the "TAB" key on your keyboard, the app will be able to
give you a list of dropdown options that will aid you in your command typing.

Examples:

* `User types "add" in the command box and presses the "TAB" key`
* `He will be able to see a list of dropdown options as shown:`
+
image::autocomplete.png[width="790"]


=== Adding a question: `add`

Adds a question to the test bank

Format: `add type/TYPE q/QUESTION cat/CATEGORY diff/DIFFICULTY y/CORRECT_ANSWER x/WRONG_ANSWER... `

[TIP]
[%hardbreaks]
*MCQ*: 1 Correct answer and 3 Wrong answers.
*True & False*: 1 Correct answer (i.e. True / False) wrong answers omitted.
*SAQ*: Multiple correct answers, wrong answers omitted.

Examples:

* `add type/mcq q/According to the textbook, which kind of project is more difficult? cat/Week 2 diff/1 x/
Greenfield x/Brownfield y/None of the others of the above x/Padifield`
* `add type/tf q/OODMs are Class Diagrams cat/uml diff/2 y/true `

=== Editing a question : `edit`

Edits an existing question in the test bank.

Format: `edit INDEX [q/QUESTION] [cat/CATEGORY] [diff/DIFFICULTY] [x/WRONG_ANSWER]... [y/CORRECT_ANSWER]...`

****
* Edits the question at the specified `INDEX`. The index refers to the index number shown in the displayed question list.
The index *must be a positive integer* 1, 2, 3, ...
* At least one of the optional fields must be provided.
* Existing values will be updated to the input values.
* When editing category and/or difficulty, the existing category and/or difficulty of the question will be removed
i.e adding of category and/or difficulty is not cumulative.
****

Examples:

* `edit 1 q/According the the textbook, is greenfield or brownfield tougher?` +
Edits the the first question to "According the the textbook, is greenfield or brownfield tougher?"

=== Deleting a question : `delete`

Deletes the specified questions from the test bank. +
Format: `delete INDEX [MORE_INDICES]`

****
* Delete the question(s) at the specified `INDEX`s.
* The index refers to the index number shown in the displayed question list.
* The index *must be a positive integer* 1, 2, 3, ...
****

Examples:

* `list` +
`delete 2` +
Deletes the 2nd question in the test bank list.
* `find Greenfield` +
`delete 1 3 5` +
Deletes the 1st, 3rd and 5th question in the test bank list.

=== Listing all questions : `list`

Shows a list of all questions in the test back. If appended with a category and/or difficulty, `*Insert name*` will show all questions
of the chosen category and/or difficulty

Format: `list [cat/CATEGORY] [diff/DIFFICULTY]`

[TIP]
If no category or difficulty is stated (i.e. `list`), program will list the entire question bank.

Examples:

* `list cat/requirements`
* `list cat/requiments diff/2`

=== Locating questions: `find`

Finds questions whose descriptions contain any of the given keywords. +

Format: `find KEYWORD [MORE_KEYWORDS]`

****
* The search is case insensitive. e.g `brownfield` will match `Brownfield`
* The order of the keywords does not matter. e.g. `green field` will match `field green`
* Only the name is searched.
* Only full words will be matched e.g. `Requirement` will not match `Requirements`
* Descriptions matching at least one keyword will be returned (i.e. `OR` search). e.g. `User story` will return `User Survery`, `User Input`
****

Examples:

* `find User` +
Returns `How do you gather user requirements?` and `What is the recommended user story format?`
* `find User, Brownfield, Greenfield` +
Returns any question containing descriptions `User`, `Brownfield`, or `Greenfield`

=== Clearing all entries : `clear`

Clears all questions from the test bank. +
Format: `clear`

=== Restoring all entries : `restore`

Clears all current questions from the test bank and restores the default questions that were in the original app. +
Format: `restore`

=== Saving the data

Test bank data are saved in the hard disk automatically after any command that changes the data.
There is no need to save manually.

// tag::import/export[]
=== Importing / Exporting test banks `[coming in v2.0]`

_{explain how the user can import / export test banks}_
// end::import/export[]

== FAQ

*Q*: How do I transfer my data to another Computer? +
*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous Test Bank folder.

== Command Summary

* *Help* : `help`

* *Start* `start mode/MODE` +
e.g. `start mode/normal`

* *Exit* `exit`

* *Status* : `status`

* *Add* `add type/TYPE q/QUESTION cat/CATEGORY diff/DIFFICULTY y/CORRECT_ANSWER x/WRONG_ANSWER...` +
e.g. `add type/mcq q/According to the textbook, which kind of project is more difficult? cat/Week 2 diff/1
x/Greenfield x/Brownfield y/None of the others of the above x/Padifield`

* *Edit* : `edit INDEX [q/QUESTION] [cat/CATEGORY] [diff/DIFFICULTY] [x/WRONG_ANSWER]... [y/CORRECT_ANSWER]...` +
e.g. `edit 1 q/According the the textbook, is greenfield or brownfield tougher?`

* *Delete* : `delete INDEX [MORE_INDICES]` +
e.g. `delete 1 3 5`

* *List* : `list [cat/CATEGORY] [diff/DIFFICULTY]`
e.g. `list cat/requiments diff/2`

* *Find* : `find KEYWORD [MORE_KEYWORDS]` +
e.g. `find user story`

* *Clear* : `clear`

* *Restore* : `restore`

[TIP]
[%hardbreaks]
*AutoComplete*: Use the "TAB" key to see dropdown options
for auto completion.